install.packages("swirl")
library("swirl")
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran -(X:size))
select(cran, -(X:size))
filter(cran, package== "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5, NA, 10))
!is.na(c(3,5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, dec(ip_id))
arrange(cran2, desc(ip_id))
arrance(cran2, package, ip_id)
arrange(cran2, package, ip_id)
arrange(cran, country, desc(r_version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size /2^20)
mutate(cran3, size_mb = size /2^20, size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "0a06680d7965d5ef1324",
secret = "ce3b7863f49b6aae387dbc42ddb1c817ee76633d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
rm(ls())
rm(list = ls())
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "0a06680d7965d5ef1324",
secret = "ce3b7863f49b6aae387dbc42ddb1c817ee76633d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
install.packages("httpuv")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "0a06680d7965d5ef1324",
secret = "ce3b7863f49b6aae387dbc42ddb1c817ee76633d")
myapp
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(httpuv)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
rm(list = ls())
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "ClientID", "ClientSecret")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
rm(list = ls())
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "ClientID", "ClientSecret")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github", "0a06680d7965d5ef1324", "ce3b7863f49b6aae387dbc42ddb1c817ee76633d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
rm(list = ls())
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("TestingOAuth",
key = "0a06680d7965d5ef1324",
secret = "ce3b7863f49b6aae387dbc42ddb1c817ee76633d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req[1]
req[2]
req[3]
req[4]
gtoken
myapp
names(gtoken)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("TestingOAuth",
key = "0a06680d7965d5ef1324",
secret = "ce3b7863f49b6aae387dbc42ddb1c817ee76633d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
browse(req)
library(jsonlite)
names(req)
names(req$url)
names(req$date)
names(req$content)
req[req$date]
json1 <- content(req)
json2 <- jsonlite::fromJSON(toJSON(json1))
View(json2)
View(json2)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csb, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cram <- tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
View(cram)
View(cram)
View(cram)
filter(cran, r_version <= "3.0.2", country == "N")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country== "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5, NA, 10))
!is.na(c(3,5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, coutnry, desc(r_version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(package)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
submit()
pack_sum
quantle(pack_sum$count, probs = 0.99)
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
arrange(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
setwd("~/Rob/Coursera/Getting_and_Cleaning_Data/project")
dataPath <- file.path("./data")
if(!file.exists(dataPath)){dir.create(dataPath)}
zipfileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
zipfileDownload <- file.path(dataPath, "UCHARDataset.zip")
if(!file.exists(zipfileDownload)) {download.file(zipfileURL,destfile=zipfileDownload)}
file.list(dataPath)
list.files(dataPath)
unzip(zipfile=zipfileDownload,exdir=dataPath)
list.files(dataPath)
list.files(file.path(dataPath,"UCI HAR Datset"))
list.files(file.path(dataPath,"UCI HAR Dataset"))
list.files(file.path(dataPath,"UCI HAR Dataset"), recursive = TRUE)
list.files(file.path(dataPath,"UCI HAR Dataset"), recursive = TRUE)
X_test <- read.table(file.path(UCI_HAR_dataPath, "test/X_test.txt"), header = FALSE)
UCI_HAR_dataPath <- file.path(dataPath, "UCI HAR Dataset")
X_test <- read.table(file.path(UCI_HAR_dataPath, "test/X_test.txt"), header = FALSE)
X_train <- read.table(file.path(UCI_HAR_dataPath, "train/X_train.txt"), header = FALSE)
data.features <- rbind(X_test, X_train)
rm(X_test)
rm(X_train)
feature_names <- read.table(file.path(UCI_HAR_dataPath, "features.txt"), header = FALSE)
names(data.features) <- feature_names[,2]
subject_test <- read.table(file.path(UCI_HAR_dataPath, "test/subject_test.txt"), header = FALSE)
subject_train <- read.table(file.path(UCI_HAR_dataPath, "train/subject_train.txt"), header = FALSE)
data.subject <- rbind(subject_test, subject_train)
rm(subject_test)
rm(subject_train)
names(data.subject) <- c("Subject")
Y_test <- read.table(file.path(UCI_HAR_dataPath, "test/Y_test.txt"), header = FALSE)
Y_train <- read.table(file.path(UCI_HAR_dataPath, "train/Y_train.txt"), header = FALSE)
data.activity <- rbind(Y_test, Y_train)
rm(Y_test)
rm(Y_train)
names(data.activity) <- c("ActivityCode")
ActivityLabels <- read.table(file.path(UCI_HAR_dataPath, "activity_labels.txt"), header = FALSE)
View(ActivityLabels)
names(ActivityLabels) <- c("ActivityCode", "Activity")
data.activity <- merge(data.activity, ActivityLabels, by="ActivityCode", all.x = T)
UCI_HAR_data <- cbind(data.subject, data.activity, data.features)
FeatureNamesToKeep <- feature_names$V2[grep("mean\\(\\)|std\\(\\)", feature_names$V2)]
UCI_HAR_data <- subset(UCI_HAR_data, select = c("Subject", "ActivityCode", "Activity",
as.character(FeatureNamesToKeep)))
names(UCI_HAR_data)
View(ActivityLabels)
library(plyr)
tidydata <- aggregate(. ~Subject + Activity, Data, mean)
tidydata <- aggregate(. ~Subject + Activity, UCI_HAR_data, mean)
View(tidydata)
View(UCI_HAR_data)
tidydata <- tidydata[order(tidydata$Subject, tidydata$Activity), ]
View(tidydata)
tidydata <- aggregate(. ~Subject + ActivityCode, UCI_HAR_data, mean)
tidydata <- tidydata[order(tidydata$Subject, tidydata$ActivityCode), ]
View(tidydata)
?aggregate
?aggregate.data.frame
?"plyr-package"
tidydat <- ddply(UCI_HAR_data, .(Subject, ActivityCode), function(x) colMeans(x[, 4:69]))
View(tidydat)
View(data.activity)
tidydata <- aggregate(tidydata, by =  ~Subject + ActivityCode, UCI_HAR_data, mean)
tidydata <- tidydata[order(tidydata$Subject, tidydata$ActivityCode), ]
tidydata <- aggregate(tidydata, by =  ~Subject + ActivityCode, UCI_HAR_data, mean)
tidydata <- aggregate(UCI_HAR_data, by =  ~Subject + ActivityCode, UCI_HAR_data, mean)
tidydata <- (. ~Subject + Activity_Name, UCI_HAR_data, mean)
tidydata <- (., ~Subject + Activity_Name, UCI_HAR_data, mean)
tidydata <- (. ~Subject + Activity_Name, UCI_HAR_data, mean)
tidydata <- (. ~Subject + Activity, UCI_HAR_data, mean)
tidydata <- (. ~Subject + ActivityCode UCI_HAR_data, mean)
tidydata <- aggregate(. ~Subject + ActivityCode, UCI_HAR_data, mean)
View(tidydata)
data.activity <- merge(data.activity, ActivityLabels, by="ActivityCode", all.x = T)
View(data.activity)
